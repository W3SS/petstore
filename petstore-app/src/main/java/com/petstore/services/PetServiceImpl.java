package com.petstore.services;

import com.petstore.entities.Category;
import com.petstore.entities.Pet;
import com.petstore.entities.Tag;
import com.petstore.exceptions.PetStoreException;
import com.petstore.exceptions.PetStoreExceptionMsg;
import com.petstore.repositories.CategoryRepository;
import com.petstore.repositories.PetRepository;
import com.petstore.repositories.TagRepository;
import com.petstore.validators.PetValidator;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import java.util.HashSet;
import java.util.List;
import java.util.Set;

/**
 * Spring service implementation class for {@link PetService}.
 * <p>
 * User: Ionut Barau (ionutbarau)
 * Project: petstore
 * Date: 21/04/2017.
 * Time: 19:19
 */
@Service
@Transactional(propagation = Propagation.REQUIRED)
public class PetServiceImpl implements PetService {

    @Autowired
    private PetRepository petRepository;

    @Autowired
    private TagRepository tagRepository;

    @Autowired
    private CategoryRepository categoryRepository;

    @Autowired
    private PetValidator petValidator;

    @Transactional(propagation = Propagation.REQUIRED, readOnly = true)
    @Override
    public List<Pet> list() {
        return petRepository.findAll();
    }

    @Transactional(propagation = Propagation.REQUIRED, readOnly = true)
    @Override
    public Pet find(Integer id) throws PetStoreException {
        if (id < 0) {
            throw new PetStoreException(PetStoreExceptionMsg.INVALID_ID);
        }
        Pet pet = petRepository.findOne(id);
        if (pet == null) {
            throw new PetStoreException(PetStoreExceptionMsg.PET_NOT_FOUND);
        }
        return pet;
    }

    @Override
    public Pet add(Pet pet) throws PetStoreException {
        petValidator.validate(pet);

        //0 as id represents a new pet. @Id field has it's value generated by sequence.
        Integer petId = pet.getId();
        if (petId != null && petId.equals(0)) {
            pet.setId(null);
        }

        //persist relationship
        persistRelationships(pet);
        return petRepository.save(pet);
    }

    private void persistRelationships(Pet pet) {


        //handle category persistence
        Category category = pet.getCategory();
        Integer catId = category.getId();
        //0 as id represents a new category. @Id field has it's value generated by sequence.
        if (catId != null && catId.equals(0)) {
            category.setId(null);
        }
        pet.setCategory(categoryRepository.save(category));

        //handle tags persistence
        Set<Tag> mergedTags = new HashSet<>();
        Set<Tag> tags = pet.getTags();
        tags.stream().forEach(tag -> {
            //0 as id represents a new tag. @Id field has it's value generated by sequence.
            if (tag.getId() != null && tag.getId().equals(0)) {
                tag.setId(null);
            }
            mergedTags.add(tagRepository.save(tag));
        });
        pet.setTags(mergedTags);
    }

    @Override
    public void delete(Integer id) throws PetStoreException {
        Pet pet = find(id);
        petRepository.delete(pet.getId());
    }
}
